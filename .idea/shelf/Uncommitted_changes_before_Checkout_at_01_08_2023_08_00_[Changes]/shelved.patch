Index: Server/src/main/java/de/shgruppe/tischkicker_server/errorhandling/ExceptionHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package de.shgruppe.tischkicker_server.errorhandling;\r\n\r\nimport org.springframework.beans.TypeMismatchException;\r\nimport org.springframework.http.HttpHeaders;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.validation.BindException;\r\nimport org.springframework.validation.FieldError;\r\nimport org.springframework.validation.ObjectError;\r\nimport org.springframework.web.HttpMediaTypeNotSupportedException;\r\nimport org.springframework.web.HttpRequestMethodNotSupportedException;\r\nimport org.springframework.web.bind.MethodArgumentNotValidException;\r\nimport org.springframework.web.bind.MissingServletRequestParameterException;\r\nimport org.springframework.web.bind.annotation.ControllerAdvice;\r\nimport org.springframework.web.context.request.WebRequest;\r\nimport org.springframework.web.method.annotation.MethodArgumentTypeMismatchException;\r\nimport org.springframework.web.multipart.support.MissingServletRequestPartException;\r\nimport org.springframework.web.servlet.NoHandlerFoundException;\r\nimport org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@ControllerAdvice\r\npublic class ExceptionHandler extends ResponseEntityExceptionHandler {\r\n\r\n    // 400\r\n\r\n    @Override\r\n    protected ResponseEntity<Object> handleMethodArgumentNotValid(final MethodArgumentNotValidException ex, final HttpHeaders headers, final HttpStatus status, final WebRequest request) {\r\n        logger.info(ex.getClass().getName());\r\n        //\r\n        final List<String> errors = new ArrayList<>();\r\n        for (final FieldError error : ex.getBindingResult().getFieldErrors()) {\r\n            errors.add(error.getField() + \": \" + error.getDefaultMessage());\r\n        }\r\n        for (final ObjectError error : ex.getBindingResult().getGlobalErrors()) {\r\n            errors.add(error.getObjectName() + \": \" + error.getDefaultMessage());\r\n        }\r\n        final ApiError apiError = new ApiError(HttpStatus.BAD_REQUEST, ex.getLocalizedMessage(), errors);\r\n\r\n        return handleExceptionInternal(ex, apiError, headers, apiError.getStatus(), request);\r\n    }\r\n\r\n    @Override\r\n    protected ResponseEntity<Object> handleBindException(final BindException ex, final HttpHeaders headers, final HttpStatus status, final WebRequest request) {\r\n        logger.info(ex.getClass().getName());\r\n        //\r\n        final List<String> errors = new ArrayList<>();\r\n        for (final FieldError error : ex.getBindingResult().getFieldErrors()) {\r\n            errors.add(error.getField() + \": \" + error.getDefaultMessage());\r\n        }\r\n        for (final ObjectError error : ex.getBindingResult().getGlobalErrors()) {\r\n            errors.add(error.getObjectName() + \": \" + error.getDefaultMessage());\r\n        }\r\n        final de.shgruppe.springsample.errorhandling.ApiError apiError = new de.shgruppe.springsample.errorhandling.ApiError(HttpStatus.BAD_REQUEST, ex.getLocalizedMessage(), errors);\r\n\r\n        return handleExceptionInternal(ex, apiError, headers, apiError.getStatus(), request);\r\n    }\r\n\r\n    @Override\r\n    protected ResponseEntity<Object> handleTypeMismatch(final TypeMismatchException ex, final HttpHeaders headers, final HttpStatus status, final WebRequest request) {\r\n        logger.info(ex.getClass().getName());\r\n        //\r\n        final String error = ex.getValue() + \" value for \" + ex.getPropertyName() + \" should be of type \" + ex.getRequiredType();\r\n\r\n        final ApiError apiError = new ApiError(HttpStatus.BAD_REQUEST, ex.getLocalizedMessage(), error);\r\n\r\n        return new ResponseEntity<>(apiError, new HttpHeaders(), apiError.getStatus());\r\n    }\r\n\r\n    @Override\r\n    protected ResponseEntity<Object> handleMissingServletRequestPart(final MissingServletRequestPartException ex, final HttpHeaders headers, final HttpStatus status, final WebRequest request) {\r\n        logger.info(ex.getClass().getName());\r\n        //\r\n        final String error = ex.getRequestPartName() + \" part is missing\";\r\n        final ApiError apiError = new ApiError(HttpStatus.BAD_REQUEST, ex.getLocalizedMessage(), error);\r\n\r\n        return new ResponseEntity<>(apiError, new HttpHeaders(), apiError.getStatus());\r\n    }\r\n\r\n    @Override\r\n    protected ResponseEntity<Object> handleMissingServletRequestParameter(final MissingServletRequestParameterException ex, final HttpHeaders headers, final HttpStatus status, final WebRequest request) {\r\n        logger.info(ex.getClass().getName());\r\n        //\r\n        final String error = ex.getParameterName() + \" parameter is missing\";\r\n        final ApiError apiError = new ApiError(HttpStatus.BAD_REQUEST, ex.getLocalizedMessage(), error);\r\n\r\n        return new ResponseEntity<>(apiError, new HttpHeaders(), apiError.getStatus());\r\n    }\r\n\r\n    //\r\n\r\n    @org.springframework.web.bind.annotation.ExceptionHandler({MethodArgumentTypeMismatchException.class})\r\n    public ResponseEntity<Object> handleMethodArgumentTypeMismatch(final MethodArgumentTypeMismatchException ex, final WebRequest request) {\r\n        logger.info(ex.getClass().getName());\r\n        //\r\n        final String error = ex.getName() + \" should be of type \" + ex.getRequiredType().getName();\r\n\r\n        final ApiError apiError = new ApiError(HttpStatus.BAD_REQUEST, ex.getLocalizedMessage(), error);\r\n\r\n        return new ResponseEntity<Object>(apiError, new HttpHeaders(), apiError.getStatus());\r\n    }\r\n\r\n\r\n    // 404\r\n\r\n    @Override\r\n    protected ResponseEntity<Object> handleNoHandlerFoundException(final NoHandlerFoundException ex, final HttpHeaders headers, final HttpStatus status, final WebRequest request) {\r\n        logger.info(ex.getClass().getName());\r\n        //\r\n        final String error = \"No handler found for \" + ex.getHttpMethod() + \" \" + ex.getRequestURL();\r\n\r\n        final ApiError apiError = new ApiError(HttpStatus.NOT_FOUND, ex.getLocalizedMessage(), error);\r\n\r\n        return new ResponseEntity<Object>(apiError, new HttpHeaders(), apiError.getStatus());\r\n    }\r\n\r\n    // 405\r\n\r\n    @Override\r\n    protected ResponseEntity<Object> handleHttpRequestMethodNotSupported(final HttpRequestMethodNotSupportedException ex, final HttpHeaders headers, final HttpStatus status, final WebRequest request) {\r\n        logger.info(ex.getClass().getName());\r\n        //\r\n        final StringBuilder builder = new StringBuilder();\r\n        builder.append(ex.getMethod());\r\n        builder.append(\" method is not supported for this request. Supported methods are \");\r\n        ex.getSupportedHttpMethods().forEach(t -> builder.append(t + \" \"));\r\n\r\n        final ApiError apiError = new ApiError(HttpStatus.METHOD_NOT_ALLOWED, ex.getLocalizedMessage(), builder.toString());\r\n\r\n        return new ResponseEntity<Object>(apiError, new HttpHeaders(), apiError.getStatus());\r\n    }\r\n\r\n    // 415\r\n\r\n    @Override\r\n    protected ResponseEntity<Object> handleHttpMediaTypeNotSupported(final HttpMediaTypeNotSupportedException ex, final HttpHeaders headers, final HttpStatus status, final WebRequest request) {\r\n        logger.info(ex.getClass().getName());\r\n        //\r\n        final StringBuilder builder = new StringBuilder();\r\n        builder.append(ex.getContentType());\r\n        builder.append(\" media type is not supported. Supported media types are \");\r\n        ex.getSupportedMediaTypes().forEach(t -> builder.append(t).append(\" \"));\r\n\r\n        final ApiError apiError = new ApiError(HttpStatus.UNSUPPORTED_MEDIA_TYPE, ex.getLocalizedMessage(), builder.substring(0, builder.length() - 2));\r\n\r\n        return new ResponseEntity<>(apiError, new HttpHeaders(), apiError.getStatus());\r\n    }\r\n\r\n    // 500\r\n\r\n    @org.springframework.web.bind.annotation.ExceptionHandler({Exception.class})\r\n    public ResponseEntity<Object> handleAll(final Exception ex, final WebRequest request) {\r\n        logger.info(ex.getClass().getName());\r\n        logger.error(\"error\", ex);\r\n        //\r\n        final ApiError apiError = new ApiError(HttpStatus.INTERNAL_SERVER_ERROR, ex.getLocalizedMessage(), \"error occurred\");\r\n\r\n        return new ResponseEntity<Object>(apiError, new HttpHeaders(), apiError.getStatus());\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Server/src/main/java/de/shgruppe/tischkicker_server/errorhandling/ExceptionHandler.java b/Server/src/main/java/de/shgruppe/tischkicker_server/errorhandling/ExceptionHandler.java
--- a/Server/src/main/java/de/shgruppe/tischkicker_server/errorhandling/ExceptionHandler.java	(revision 9d91f4f290e11507c17aa39e88f606596e0688ac)
+++ b/Server/src/main/java/de/shgruppe/tischkicker_server/errorhandling/ExceptionHandler.java	(date 1690868062332)
@@ -53,7 +53,7 @@
         for (final ObjectError error : ex.getBindingResult().getGlobalErrors()) {
             errors.add(error.getObjectName() + ": " + error.getDefaultMessage());
         }
-        final de.shgruppe.springsample.errorhandling.ApiError apiError = new de.shgruppe.springsample.errorhandling.ApiError(HttpStatus.BAD_REQUEST, ex.getLocalizedMessage(), errors);
+        final ApiError apiError = new ApiError(HttpStatus.BAD_REQUEST, ex.getLocalizedMessage(), errors);
 
         return handleExceptionInternal(ex, apiError, headers, apiError.getStatus(), request);
     }
